over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; D[c]=", D[c]))
submat <- M[gTAD$start:gTAD$end,(r:r+D[c])]
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))]<-first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
D<-floor(pos_2_index(L,R))-1  # Transforming length of genes into number of bins.
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; D[c]=", D[c]))
submat <- M[gTAD$start:gTAD$end,(r:r+D[c])]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))]<-first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
# m=contact matrix; R=resolution; L=vector containing length of genes;S=vector containing start of genes
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
D<-floor(pos_2_index(L,R))-1  # Transforming length of genes into number of bins.
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; D[c]=", D[c]))
submat <- matrix(M[gTAD$start:gTAD$end,(r:r+D[c])],ncol = D)
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))]<-first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
a+b
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
D<-floor(pos_2_index(L,R))-1  # Transforming length of genes into number of bins.
E <- ceiling(pos_2_index(S+L))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; D[c]=", D[c]))
submat <- M[gTAD$start:gTAD$end,(r:E[c])]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
d
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
# m=contact matrix; R=resolution; L=vector containing length of genes;S=vector containing start of genes
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; D[c]=", D[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
subma <- 0
submat <- 0
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L,R))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
linc <- data.frame(chr=c(1,1),start=c(14,16),end=c(16,22),gene=c("a","b"),strand=c("+","+"))
TAD <- data.frame(chr=1,start=15,end=30,ID="TAD")
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L,R))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
print(submat)
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L,R))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
testmat
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L,R))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat[,1:(length(submat[1,])-1]))  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- ceiling(pos_2_index(S+L,R))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
print(submat)
first.last_avg <- rowMeans(submat[,c(1,length(submat[1,]))])
submat[,c(1,length(submat[1,]))] <- first.last_avg
diam[c] <-  mean(submat[,1:(length(submat[1,])-1)])  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide<-function(m,R=5000,S , L, tad){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- floor(pos_2_index(S+L,R))  # storing indexes of end positions
int_tad <- Intervals(matrix(c(tad$start,tad$end),ncol=2))
int_linc <- Intervals(matrix(c(S,S+L),ncol=2))
rownames(int_tad) <- tad$ID
for(r in i){  # Iterating over genes
over <-interval_overlap(int_tad,int_linc[c])
gTAD <- tad[tad$ID==names(unlist(over[over!=0])),]
if(length(gTAD[,1])>0){
gTAD$start <- pos_2_index(gTAD$start,R)
gTAD$end <- pos_2_index(gTAD$end,R)
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
submat <- M[gTAD$start:gTAD$end,r:E[c]]
diam[c] <-  mean(submat)  # desired width of square (based on gene length)
} else{
diam[c] <- 0
}
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide<-function(m,R=5000,S , L){  # L = vector containing each gene length; R = resolution, m = intrachromosomal matrix
N <- length(m[[1]][1,])  # Storing number of cols
M <- m[[1]]  # Transforming matrix into vector
diam <- rep(0,times=length(L)) # preallocating space for diamond-summed data.
c <- 1
i <- rep(0,length(L)) #preallocating space for vector indexes of start sites
for(d in 1:length(L)){i[d]<-floor(pos_2_index(S[d],R))}  #transforming start position into rounded vector indexes
E <- floor(pos_2_index(S+L,R))  # storing indexes of end positions
for(r in i){  # Iterating over genes
print(paste0("r=",r,"; N=",N,"; E[c]=", E[c]))
diam[c] <-  mean(M[1:N,r:E[c]]) # desired width of square (based on gene length)
# Storing normalized diamond sums in vector
c <- c+1
}
return(cbind(linc,diam))
}
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),tad=TAD,R = 5)
diam_slide(testmat, S=linc$start, L=as.vector(linc$end-linc$start),R = 5)
V <- scan("/home/cyril/Documents/Master/sem_1/First_step/data/diam_sums/GM12878/chr21.txt")
index_2_pos <- function(ind, resolution=5000) { return(resolution * (ind - 1)) }# Finding actual position in genome from bin number.
index_2_pos(7920)
index_2_pos(7919)
index_2_pos(7935)
plot(7919:7935,V[7919:7935],type="p")
abline(v=7919,col="blue")
abline(v=7919,col="blue")
abline(v=7935,col="green")
abline(v=7935,col="green")
abline(h=V[7919]+max(V[7919:7935]/10),lty=2,col="green")
plot(7919:7935,V[7919:7935],type="p")
abline(v=7919,col="blue")
abline(v=7919,col="blue")
abline(v=7935,col="green")
abline(v=7935,col="green")
abline(h=V[7919]+max(V[7919:7935]/10),lty=2,col="blue")
abline(h=V[7919]+max(V[7919:7935]/10),lty=2,col="blue")
abline(h=V[7935]+max(V[7919:7935]/10),lty=2,col="green")
abline(h=V[7935]+max(V[7919:7935]/10),lty=2,col="green")
plot(7919:7935,V[7919:7935],type="b")
abline(v=7919,col="blue")
abline(v=7919,col="blue")
abline(v=7935,col="green")
abline(v=7935,col="green")
abline(h=V[7935]+max(V[7919:7935]/10),lty=2,col="green")
abline(h=V[7935]+max(V[7919:7935]/10),lty=2,col="green")
abline(h=V[7919]+max(V[7919:7935]/10),lty=2,col="blue")
abline(h=V[7919]+max(V[7919:7935]/10),lty=2,col="blue")
plot(7919:7935,V[7919:7935],type="b",xlab="V index",ylab="V value")
abline(v=7919,col="blue")
abline(v=7919,col="blue")
abline(v=7935,col="green")
abline(v=7935,col="green")
abline(h=V[7919]+max(V[7919:7935]/10),lty=2,col="blue")
abline(h=V[7919]+max(V[7919:7935]/10),lty=2,col="blue")
abline(h=V[7935]+max(V[7919:7935]/10),lty=2,col="green")
abline(h=V[7935]+max(V[7919:7935]/10),lty=2,col="green")
22:1
c(22:1,"X")
whole_gat <- read.table("GAT/out/whole_seg_10kgat_results.txt",header=T)
whole_gat <- read.table("../data/GAT/out/whole_seg_10kgat_results.txt",header=T)
bins2gene<-droplevels(whole_gat[whole_gat$segment=="short5bins",])
bins2gene$track <- as.character(bins2gene$track)
bins2gene$track <- factor(bins2gene$track,levels = c(1:20))
gene2bins<-droplevels(whole_gat[whole_gat$annotation=="short5bins",])
gene2bins$annottrack <- as.character(gene2bins$annottrack)
gene2bins$annottrack <- factor(gene2bins$annottrack,levels = c(1:20))
bs2gene<-droplevels(whole_gat[whole_gat$segment=="bindingsite",])
gene2bs<-droplevels(whole_gat[whole_gat$annotation=="bindingsite",])
library(ggplot2)
elements_names <- c(
`pr` = "promoter",
`prb` = "promoter + gene body",
`elinc` = "elincRNA",
`nelinc` = "non-elincRNA",
`epc` = "epc gene",
`nepc` = "non-epc gene"
)
b2g <- ggplot(data=bins2gene[bins2gene$workspace=="wholegenome",],aes(x=track,y=fold,fill=log10(qval)))+
scale_fill_continuous(low="#66bb66",high="#bb6666",guide = "colourbar",name= "Log10 q-value")+
geom_bar(stat="identity")+theme_bw()+
facet_grid(element~annotation,labeller = as_labeller(elements_names))+
ggtitle("Enrichment of TAD bins in lincRNAs and pcgenes")+
xlab("TAD bins") + ylab("Fold enrichment")
g2b <- ggplot(data=gene2bins[gene2bins$workspace=="wholegenome",],aes(x=annottrack,y=fold,fill=log10(qval)))+
scale_fill_continuous(low="#66bb66",high="#bb6666",guide = "colourbar",name= "Log10 q-value")+
geom_bar(stat="identity")+theme_bw()+
facet_grid(element~segment,labeller = as_labeller(elements_names))+
ggtitle("Enrichment of lincRNAs and pc genes in TAD bins")+
xlab("TAD bins") + ylab("Fold enrichment")
bs2g <- ggplot(data=bs2gene,aes(x=workspace,y=fold,fill=log10(qval)))+
scale_fill_continuous(low="#66bb66",high="#bb6666",guide = "colourbar",name= "Log10 q-value")+
geom_bar(stat="identity")+theme_bw()+
facet_grid(element~annotation,labeller = as_labeller(elements_names))+
ggtitle("Enrichment of CTCF/cohesin binding sites in lincRNAs and pcgenes")+
xlab("Workspace") + ylab("Fold enrichment")+theme(axis.text.x=element_text(angle = -90, hjust = 0))
g2bs <- ggplot(data=gene2bs,aes(x=workspace,y=fold,fill=log10(qval)))+
scale_fill_continuous(low="#66bb66",high="#bb6666",guide = "colourbar",name= "Log10 q-value")+
geom_bar(stat="identity")+theme_bw()+
facet_grid(element~segment,labeller = as_labeller(elements_names))+
ggtitle("Enrichment of lincRNAs and pc genes in CTCF/cohesin binding sites")+
xlab("Workspace") + ylab("Fold enrichment")+theme(axis.text.x=element_text(angle = -90, hjust = 0))
b2g
