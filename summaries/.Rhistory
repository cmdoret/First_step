Sys.sleep(0.01)
}
Md <- M
Md <- mat.convolution(Md,med=T)
Md <- M
Md <- mat.convolution(Md,med=T)
View(Md)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<n.row ){
if((J+j)>0 & (J+j)<n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
out <- ifelse(md,median(ind_neigh),mean(ind_neigh))
return(out)
}
mat.convolution <- function(M,med=F){
mat.row <-nrow(M)
mat.col <- ncol(M)
ConvMat <- sapply(1:mat.col,function(j){
sapply(1:mat.row,function(i){get_neigh(mat=M,md=med,I=i,J=j,n.row=mat.row,n.col=mat.col)})})
return(ConvMat)
}
#M <- matrix(c(1,1,1,1,10,1,1,1,1),nrow=3)
Mc <- M
Md <- M
M <- matrix(nrow=100,ncol=100,rnorm(10000,10,20.3))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<n.row ){
if((J+j)>0 & (J+j)<n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(ind_neigh)
out <- ifelse(md,median(ind_neigh),mean(ind_neigh))
return(out)
}
mat.convolution <- function(M,med=F){
mat.row <-nrow(M)
mat.col <- ncol(M)
ConvMat <- sapply(1:mat.col,function(j){
sapply(1:mat.row,function(i){get_neigh(mat=M,md=med,I=i,J=j,n.row=mat.row,n.col=mat.col)})})
return(ConvMat)
}
#M <- matrix(c(1,1,1,1,10,1,1,1,1),nrow=3)
Mc <- M
Md <- M
M <- matrix(nrow=100,ncol=100,rnorm(10000,10,20.3))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<n.row ){
if((J+j)>0 & (J+j)<n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(ind_neigh)
out <- ifelse(md,median(ind_neigh),mean(ind_neigh))
return(out)
}
mat.convolution <- function(M,med=F){
mat.row <-nrow(M)
mat.col <- ncol(M)
ConvMat <- sapply(1:mat.col,function(j){
sapply(1:mat.row,function(i){get_neigh(mat=M,md=med,I=i,J=j,n.row=mat.row,n.col=mat.col)})})
return(ConvMat)
}
#M <- matrix(c(1,1,1,1,10,1,1,1,1),nrow=3)
Mc <- M
Md <- M
M <- matrix(nrow=100,ncol=100,rnorm(10000,10,20.3))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
M <- matrix(c(1,1,1,1,10,1,1,1,1),nrow=3)
mat.convolution(M,med=F)
M <- matrix(c(1,1,1,1,10,1,1,1,1),nrow=3)
M
mat.convolution(M,med=F)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(ind_neigh)
out <- ifelse(md,median(ind_neigh),mean(ind_neigh))
return(out)
}
mat.convolution(M,med=F)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(ind_neigh)
out <- ifelse(md,median(ind_neigh),mean(ind_neigh))
return(out)
}
mat.convolution(M,med=F)
10+8
13/4
mat.convolution(M,med=T)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(ind_neigh)
out <- ifelse(md,median(ind_neigh),mean(ind_neigh))
print(out)
return(out)
}
mat.convolution(M,med=T)
mat.convolution(M,med=F)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
out <- ifelse(md,median(ind_neigh),mean(ind_neigh))
print(out)
return(out)
}
mat.convolution(M,med=F)
mat.convolution(M,med=T)
a=T
ifelse(a,print("yes"),print("no"))
a=F
ifelse(a,print("yes"),print("no"))
ifelse(a==T,print("yes"),print("no"))
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
if(md){out <-median(ind_neigh)}else{out <- mean(ind_neigh)}
print(out)
return(out)
}
mat.convolution(M,med=T)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
if(md==T){out <-median(ind_neigh)}else{out <- mean(ind_neigh)}
print(out)
return(out)
}
mat.convolution(M,med=T)
source('~/Documents/Dossiers/convol_matrix.R', echo=TRUE)
mat.convolution(M,med=T)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(md)
if(md==T){out <-median(ind_neigh)}else{out <- mean(ind_neigh)}
print(out)
return(out)
}
mat.convolution(M,med=T)
mat.convolution(M,med=F)
M <- matrix(c(1,1,1,1,10,1,1,1,1),nrow=3)
mat.convolution(M,med=F)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(str(md))
if(md[1]==T){out <-median(ind_neigh)}else{out <- mean(ind_neigh)}
#print(out)
return(out)
}
mat.convolution(M,med=F)
mat.convolution(M,med=T)
a
if(a){print("ok")}
a=T
if(a){print("ok")}
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(str(md))
if(any(md)){out <-median(ind_neigh)}else{out <- mean(ind_neigh)}
#print(out)
return(out)
}
if(any(a)){print("ok")}
mat.convolution(M,med=T)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
print(any(md))
if(any(md)){out <-median(ind_neigh)}else{out <- mean(ind_neigh)}
#print(out)
return(out)
}
mat.convolution(M,med=T)
mat.convolution(M,med=F)
get_neigh<- function(mat,md=F,I,J,n.row,n.col){
ind_neigh <- c()
for(i in -1:1){
for(j in -1:1){
if((I+i)>0 & (I+i)<=n.row ){
if((J+j)>0 & (J+j)<=n.col){
ind_neigh <- append(ind_neigh,mat[I+i,J+j])
}
}
}
}
if(any(md)){out <-median(ind_neigh)}else{out <- mean(ind_neigh)}
#print(out)
return(out)
}
mat.convolution <- function(M,med=F){
mat.row <-nrow(M)
mat.col <- ncol(M)
ConvMat <- sapply(1:mat.col,function(j){
sapply(1:mat.row,function(i){get_neigh(mat=M,md=med,I=i,J=j,n.row=mat.row,n.col=mat.col)})})
return(ConvMat)
}
#M <- matrix(c(1,1,1,1,10,1,1,1,1),nrow=3)
Mc <- M
Md <- M
M <- matrix(nrow=100,ncol=100,rnorm(10000,10,20.3))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
Md <- M
M <- matrix(nrow=100,ncol=100,rnorm(10000,10,20.3))
Md <- M
for(i in 1:100){
#Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
for(i in 1:100){
#Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=F)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
for(i in 1:100){
#Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=F)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
for(i in 1:100){
#Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=F)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
M <- matrix(rep(0,10000),nrow=100)
M[450:500,450:500] <- 10
image(M)
M <- matrix(rep(0,10000),nrow=100)
M[450:500,450:500] <- 10
M[45:50,45:50] <- 10
M
image(M)
Md <- M
for(i in 1:100){
#Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=F)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
for(i in 1:100){
#Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=F)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
par(mfrow=c(1,2))
par(mfrow=c(1,2))
for(i in 1:100){
#Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=F)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
#image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
M <- matrix(rep(0,10000),nrow=100)
M[45:50,45:50] <- 10
Mc <- M
Md <- M
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
M <- matrix(rep(0,10000),nrow=100)
M[45:50,45:50] <- 10
Mc <- M
Md <- M
par(mfrow=c(1,2))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
image(t(Mc))
image(t(Md))
Sys.sleep(0.1)
}
Md <- Mc
par(mfrow=c(1,2))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
image(t(Mc))
image(t(Md))
Sys.sleep(0.1)
}
M <- matrix(nrow=100,ncol=100,rnorm(10000,10,20.3))
Mc <- M
Md <- M
par(mfrow=c(1,2))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
par(mfrow=c(1,3))
image(M)
image(Mc)
image(Md)
M <- matrix(nrow=100,ncol=100,rpois(10000,lambda = 10))
image(M)
plot(rpois(10000,lambda = 10))
plot(density(rpois(10000,lambda = 10)))
plot(density(rpois(10000,lambda = 100)))
plot(density(rpois(10000,lambda = 1)))
plot(density(rpois(10000,lambda = 13)))
plot(density(rpois(10000,lambda = 7)))
plot(density(rpois(10000,lambda = 1)))
M <- matrix(nrow=100,ncol=100,rpois(10000,lambda = 1))
image(M)
M <- matrix(nrow=10,ncol=10,rpois(100,lambda = 1))
image(M)
Mc <- M
Md <- M
par(mfrow=c(1,2))
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
for(i in 1:100){
Mc <- mat.convolution(Mc,med=F)
Md <- mat.convolution(Md,med=T)
#Mc <- sqrt(Mc)
#par(mfrow=c(1,2))
image(t(Mc))
image(t(Md))
Sys.sleep(0.01)
}
image (M)
image (mat.convolution(M,med=T))
image (mat.convolution(M,med=F))
image (mat.convolution(M,med=F))
par(mfrow=c(1,3))
image (M)
image (mat.convolution(M,med=F))
image (mat.convolution(M,med=T))
